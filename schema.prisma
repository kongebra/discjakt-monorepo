// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Disc {
  id        Int      @id @default(autoincrement())
  name      String
  brand     Brand    @relation(fields: [brandId], references: [id])
  brandId   Int
  speed     Int
  glide     Int
  turn      Int
  fade      Int
  imageUrl  String
  slug      String
  type      String // putter, midrange, fairway driver, distance driver
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  bags     DiscInBag[]
  plastics DiscPlasticVariants[]
  users    UserDiscs[]
}

model Brand {
  id        Int       @id @default(autoincrement())
  name      String
  discs     Disc[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  plastics  Plastic[]
}

model DiscPlasticVariants {
  disc      Disc    @relation(fields: [discId], references: [id])
  plastic   Plastic @relation(fields: [plasticId], references: [id])
  discId    Int
  plasticId Int

  @@id([discId, plasticId])
}

model Plastic {
  id      Int                   @id @default(autoincrement())
  name    String
  brand   Brand                 @relation(fields: [brandId], references: [id])
  brandId Int
  discs   DiscPlasticVariants[]
}

model DiscInBag {
  disc   Disc @relation(fields: [discId], references: [id])
  bag    Bag  @relation(fields: [bagId], references: [id])
  discId Int
  bagId  Int

  @@id([discId, bagId])
}

model Bag {
  id    Int         @id @default(autoincrement())
  discs DiscInBag[]

  players Player[]
}

model Player {
  id           Int    @id @default(autoincrement())
  firstName    String
  lastName     String
  nationallity String
  imageUrl     String
  pdgaNumber   String
  bag          Bag    @relation(fields: [bagId], references: [id])
  bagId        Int
}

// next-auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserDiscs {
  disc   Disc   @relation(fields: [discId], references: [id])
  user   User   @relation(fields: [userId], references: [id])
  discId Int
  userId String

  @@id([discId, userId])
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  discs         UserDiscs[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
