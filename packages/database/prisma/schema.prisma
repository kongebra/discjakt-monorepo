generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma-client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ProductCategory {
  Disc
  Bag
  Basket
  Accessories
  Apparel
  Other
  Unknown
}

model Product {
  id      Int      @id @default(autoincrement())
  loc     String   @unique
  lastmod DateTime

  name        String
  description String
  imageUrl    String

  category ProductCategory @default(Unknown)

  store   Store @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId Int

  disc   Disc? @relation(fields: [discId], references: [id])
  discId Int?

  prices ProductPrice[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?
}

enum Currency {
  USD
  EUR
  GBP
  NOK
  SEK
  DKK
}

enum Availability {
  InStock
  OutOfStock
  PreOrder
}

model ProductPrice {
  id           Int          @id @default(autoincrement())
  product      Product      @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId    Int
  price        Decimal      @default(0)
  currency     Currency     @default(NOK)
  availability Availability

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?

  @@index([productId, createdAt])
}

model Store {
  id   Int    @id @default(autoincrement())
  name String @unique
  slug String @unique
  url  String

  products Product[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?
}

enum DiscType {
  Putter
  Midrange
  FairwayDriver
  DistanceDriver
}

// Disc golf related
model Disc {
  id       Int      @id @default(autoincrement())
  name     String   @unique
  slug     String   @unique
  imageUrl String
  speed    Decimal
  glide    Decimal
  turn     Decimal
  fade     Decimal
  type     DiscType

  brand   Brand @relation(fields: [brandId], references: [id], onDelete: Cascade)
  brandId Int

  bags     DiscBagLink[]
  plastics DiscPlasticLink[]
  users    UserDiscs[]
  products Product[]

  proPlayersSignature ProPlayerDiscLink[] @ignore

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?
}

model Brand {
  id       Int     @id @default(autoincrement())
  name     String
  slug     String  @unique
  imageUrl String?

  discs    Disc[]
  plastics Plastic[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?
}

model DiscPlasticLink {
  disc      Disc    @relation(fields: [discId], references: [id], onDelete: Cascade)
  plastic   Plastic @relation(fields: [plasticId], references: [id], onDelete: Cascade)
  discId    Int
  plasticId Int

  @@id([discId, plasticId])
}

model Plastic {
  id      Int               @id @default(autoincrement())
  name    String
  brand   Brand             @relation(fields: [brandId], references: [id], onDelete: Cascade)
  brandId Int
  discs   DiscPlasticLink[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?
}

model DiscBagLink {
  disc   Disc @relation(fields: [discId], references: [id], onDelete: Cascade)
  bag    Bag  @relation(fields: [bagId], references: [id], onDelete: Cascade)
  discId Int
  bagId  Int

  @@id([discId, bagId])
}

model Bag {
  id    Int           @id @default(autoincrement())
  discs DiscBagLink[]

  proPlayers ProPlayer[]
  users      UserBagLink[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?
}

model UserBagLink {
  bag    Bag    @relation(fields: [bagId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  bagId  Int
  userId String

  @@id([bagId, userId])
}

// Pro player
model ProPlayer {
  id             Int                 @id @default(autoincrement())
  firstName      String
  lastName       String
  nationality    String
  imageUrl       String
  pdgaNumber     String
  bag            Bag                 @relation(fields: [bagId], references: [id])
  bagId          Int
  signatureDiscs ProPlayerDiscLink[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?
}

model ProPlayerDiscLink {
  discId      Int
  disc        Disc      @relation(fields: [discId], references: [id])
  proPlayerId Int       @map("playerId")
  proPlayer   ProPlayer @relation(fields: [proPlayerId], references: [id])

  @@id([discId, proPlayerId])
}

model UserDiscs {
  disc   Disc   @relation(fields: [discId], references: [id])
  user   User   @relation(fields: [userId], references: [id])
  discId Int
  userId String

  @@id([discId, userId])
}

enum Role {
  User
  Admin
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  accounts Account[]
  sessions Session[]
  discs    UserDiscs[]
  bags     UserBagLink[]

  role Role @default(User)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?
}

// next-auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
