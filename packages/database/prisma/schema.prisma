// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma-client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Scraping
model Product {
  id      Int       @id @default(autoincrement())
  loc     String    @unique
  lastmod DateTime?
  site    Site      @relation(fields: [siteId], references: [id])
  siteId  Int

  category String? // Disc, Bag, Basket, Accessories, Apparel, Other

  prices ProductPrice[]

  name        String?
  description String?
  imageUrl    String?

  disc   Disc? @relation(fields: [discId], references: [id])
  discId Int?

  // TODO: Other product types

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductPrice {
  id           Int      @id @default(autoincrement())
  product      Product  @relation(fields: [productId], references: [id])
  productId    Int
  price        Float
  currency     String
  createdAt    DateTime @default(now())
  availability String

  @@index([createdAt])
}

model Site {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  slug     String    @unique
  url      String
  products Product[]
}

// Disc golf related
model Disc {
  id        Int      @id @default(autoincrement())
  name      String
  brand     Brand    @relation(fields: [brandId], references: [id])
  brandId   Int
  speed     Int
  glide     Int
  turn      Int
  fade      Int
  imageUrl  String
  slug      String
  type      String // putter, midrange, fairway driver, distance driver
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  bags       DiscInBag[]
  plastics   DiscPlasticVariants[]
  users      UserDiscs[]
  products   Product[]
  proPlayers ProPlayerSignatureDiscs[] @ignore
}

model Brand {
  id        Int       @id @default(autoincrement())
  name      String
  discs     Disc[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  plastics  Plastic[]
}

model DiscPlasticVariants {
  disc      Disc    @relation(fields: [discId], references: [id])
  plastic   Plastic @relation(fields: [plasticId], references: [id])
  discId    Int
  plasticId Int

  @@id([discId, plasticId])
}

model Plastic {
  id      Int                   @id @default(autoincrement())
  name    String
  brand   Brand                 @relation(fields: [brandId], references: [id])
  brandId Int
  discs   DiscPlasticVariants[]
}

model DiscInBag {
  disc   Disc @relation(fields: [discId], references: [id])
  bag    Bag  @relation(fields: [bagId], references: [id])
  discId Int
  bagId  Int

  @@id([discId, bagId])
}

model Bag {
  id    Int         @id @default(autoincrement())
  discs DiscInBag[]

  proPlayers ProPlayer[]
  users      UserBags[]
}

model UserBags {
  bag    Bag    @relation(fields: [bagId], references: [id])
  user   User   @relation(fields: [userId], references: [id])
  bagId  Int
  userId String

  @@id([bagId, userId])
}

// Pro player
model ProPlayer {
  id             Int                       @id @default(autoincrement())
  firstName      String
  lastName       String
  nationallity   String
  imageUrl       String
  pdgaNumber     String
  bag            Bag                       @relation(fields: [bagId], references: [id])
  bagId          Int
  signatureDiscs ProPlayerSignatureDiscs[]
}

model ProPlayerSignatureDiscs {
  discId      Int
  disc        Disc      @relation(fields: [discId], references: [id])
  proPlayerId Int       @map("playerId")
  proPlayer   ProPlayer @relation(fields: [proPlayerId], references: [id])

  @@id([discId, proPlayerId])
}

model UserDiscs {
  disc   Disc   @relation(fields: [discId], references: [id])
  user   User   @relation(fields: [userId], references: [id])
  discId Int
  userId String

  @@id([discId, userId])
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  discs         UserDiscs[]
  bags          UserBags[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

// next-auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
